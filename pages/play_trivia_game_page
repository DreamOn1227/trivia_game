import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:improve_practice_app/app/trivia_games/pages/results_page.dart';
import 'package:improve_practice_app/app/trivia_games/widgets/play_trivia_game_page_list_builder.dart';
import 'package:improve_practice_app/components/progress_indicator/adaptive_circular_progress_center.dart';

import '../../../constants/string/button_string.dart';
import '../../../constants/string/firebase_string.dart';
import '../../../constants/string/trivia_game_string.dart';
import '../../../services/firestore_methods.dart';
import '../models/trivia_game_question_model.dart';
import '../widgets/app_bars/play_trivia_game_page_app_bar.dart';
import '../widgets/trivia_game_tile.dart';

class PlayTriviaGamePage extends StatefulWidget {
  const PlayTriviaGamePage({
    Key? key,
    required this.triviaGameID,
  }) : super(key: key);

  final String triviaGameID;

  @override
  State<PlayTriviaGamePage> createState() => _PlayTriviaGamePageState();
}

int total = 0;
int _correctAnswers = 0;
int _incorrectAnswers = 0;
int _notAttempted = 0;

class _PlayTriviaGamePageState extends State<PlayTriviaGamePage> {
  FirestoreMethods firestoreMethods = FirestoreMethods();
  QuerySnapshot? triviaQuestionSnapshot;
  TriviaGameQuestionModel getTriviaQuestionModelFromDataSnapshot(
      DocumentSnapshot<Map<String, dynamic>> triviaQuestionSnapshot) {
    TriviaGameQuestionModel triviaQuestionModel = TriviaGameQuestionModel();
    triviaQuestionModel.triviaQuestion =
        triviaQuestionSnapshot.data()?[FirebaseString.triviaQuestion];

    List<String> triviaGameAnswer = [
      triviaQuestionSnapshot.data()?[FirebaseString.triviaAnswerOne],
      triviaQuestionSnapshot.data()?[FirebaseString.triviaAnswerTwo],
      triviaQuestionSnapshot.data()?[FirebaseString.triviaAnswerThree],
      triviaQuestionSnapshot.data()?[FirebaseString.triviaAnswerFour],
    ];

    triviaGameAnswer.shuffle();
    triviaQuestionModel.triviaAnswerOne = triviaGameAnswer[0];
    triviaQuestionModel.triviaAnswerTwo = triviaGameAnswer[1];
    triviaQuestionModel.triviaAnswerThree = triviaGameAnswer[2];
    triviaQuestionModel.triviaAnswerFour = triviaGameAnswer[3];
    triviaQuestionModel.correctAnswer =
        triviaQuestionSnapshot.data()?[FirebaseString.triviaAnswerOne];
    triviaQuestionModel.answered = false;

    return triviaQuestionModel;
  }

  @override
  void initState() {
    super.initState();
    _getTriviaGameData();
  }

  Future<void> _getTriviaGameData() async {
    await firestoreMethods
        .getTriviaGameDataFromFirestore(widget.triviaGameID)
        .then((value) {
      triviaQuestionSnapshot = value;
      _notAttempted = 0;
      _correctAnswers = 0;
      _incorrectAnswers = 0;
      total = triviaQuestionSnapshot?.docs.length as int;
    });
    setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: const PlayTriviaGamePageAppBar(),
      body: Column(
        children: [
          triviaQuestionSnapshot == null
              ? const AdaptiveCircularProgressCenter()
              : PlayTriviaGamePageListBuilder(
                  itemBuilder: (context, index) {
                    return TriviaGameQuestionAndAnswerContainer(
                      index: index,
                      questionModel: getTriviaQuestionModelFromDataSnapshot(
                          triviaQuestionSnapshot?.docs[index]
                              as DocumentSnapshot<Map<String, dynamic>>),
                    );
                  },
                  itemCount: triviaQuestionSnapshot?.docs.length,
                ),
        ],
      ),
      floatingActionButton: FloatingActionButton.extended(
        icon: const Icon(Icons.check),
        label: Text(
          ButtonString.getScore.toUpperCase(),
        ),
        onPressed: () {
          Navigator.pushReplacement(
            context,
            MaterialPageRoute(
              builder: (context) => ResultsPage(
                correctAnswers: _correctAnswers,
                incorrectAnswers: _incorrectAnswers,
                totalScore: total,
              ),
            ),
          );
        },
      ),
    );
  }
}

class TriviaGameQuestionAndAnswerContainer extends StatefulWidget {
  const TriviaGameQuestionAndAnswerContainer({
    Key? key,
    required this.questionModel,
    required this.index,
  }) : super(key: key);
  final TriviaGameQuestionModel questionModel;
  final int index;

  @override
  State<TriviaGameQuestionAndAnswerContainer> createState() =>
      _TriviaGameQuestionAndAnswerContainerState();
}

class _TriviaGameQuestionAndAnswerContainerState
    extends State<TriviaGameQuestionAndAnswerContainer> {
  String optionSelected = '';

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Q${widget.index + 1} ${widget.questionModel.triviaQuestion as String}',
          style: const TextStyle(
            color: Colors.black87,
            fontSize: 17.0,
          ),
        ),
        const SizedBox(
          height: 12.0,
        ),
        TriviaGameTile(
          onTap: () {
            if (!widget.questionModel.answered) {
              if (widget.questionModel.triviaAnswerOne ==
                  widget.questionModel.correctAnswer) {
                optionSelected = widget.questionModel.triviaAnswerOne as String;
                widget.questionModel.answered = true;
                _correctAnswers = _correctAnswers + 1;
                _notAttempted = _notAttempted - 1;
                setState(() {});
              } else {
                optionSelected = widget.questionModel.triviaAnswerOne as String;
                widget.questionModel.answered = true;
                _incorrectAnswers = _incorrectAnswers + 1;
                _notAttempted = _notAttempted - 1;
                setState(() {});
              }
            }
          },
          correctAnswer: widget.questionModel.correctAnswer as String,
          description: widget.questionModel.triviaAnswerOne as String,
          answerLetter: TriviaGameString.answerLetterA,
          optionSelected: optionSelected,
        ),
        const SizedBox(
          height: 4.0,
        ),
        TriviaGameTile(
          onTap: () {
            if (!widget.questionModel.answered) {
              if (widget.questionModel.triviaAnswerTwo ==
                  widget.questionModel.correctAnswer) {
                optionSelected = widget.questionModel.triviaAnswerTwo as String;
                widget.questionModel.answered = true;
                _correctAnswers = _correctAnswers + 1;
                _notAttempted = _notAttempted - 1;
                setState(() {});
              } else {
                optionSelected = widget.questionModel.triviaAnswerTwo as String;
                widget.questionModel.answered = true;
                _incorrectAnswers = _incorrectAnswers + 1;
                _notAttempted = _notAttempted - 1;
                setState(() {});
              }
            }
          },
          correctAnswer: widget.questionModel.correctAnswer as String,
          description: widget.questionModel.triviaAnswerTwo as String,
          answerLetter: TriviaGameString.answerLetterB,
          optionSelected: optionSelected,
        ),
        const SizedBox(
          height: 4.0,
        ),
        TriviaGameTile(
          onTap: () {
            if (!widget.questionModel.answered) {
              if (widget.questionModel.triviaAnswerThree ==
                  widget.questionModel.correctAnswer) {
                optionSelected =
                    widget.questionModel.triviaAnswerThree as String;
                widget.questionModel.answered = true;
                _correctAnswers = _correctAnswers + 1;
                _notAttempted = _notAttempted - 1;
                setState(() {});
              } else {
                optionSelected =
                    widget.questionModel.triviaAnswerThree as String;
                widget.questionModel.answered = true;
                _incorrectAnswers = _incorrectAnswers + 1;
                _notAttempted = _notAttempted - 1;
                setState(() {});
              }
            }
          },
          correctAnswer: widget.questionModel.correctAnswer as String,
          description: widget.questionModel.triviaAnswerThree as String,
          answerLetter: TriviaGameString.answerLetterC,
          optionSelected: optionSelected,
        ),
        const SizedBox(
          height: 4.0,
        ),
        TriviaGameTile(
          onTap: () {
            if (!widget.questionModel.answered) {
              if (widget.questionModel.triviaAnswerFour ==
                  widget.questionModel.correctAnswer) {
                optionSelected =
                    widget.questionModel.triviaAnswerFour as String;
                widget.questionModel.answered = true;
                _correctAnswers = _correctAnswers + 1;
                _notAttempted = _notAttempted - 1;
                setState(() {});
              } else {
                optionSelected =
                    widget.questionModel.triviaAnswerFour as String;
                widget.questionModel.answered = true;
                _incorrectAnswers = _incorrectAnswers + 1;
                _notAttempted = _notAttempted - 1;
                setState(() {});
              }
            }
          },
          correctAnswer: widget.questionModel.correctAnswer as String,
          description: widget.questionModel.triviaAnswerFour as String,
          answerLetter: TriviaGameString.answerLetterD,
          optionSelected: optionSelected,
        ),
        const SizedBox(
          height: 20.0,
        ),
      ],
    );
  }
}
